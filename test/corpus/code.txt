================================================================================
code_block
================================================================================

#{}
#{        }
#{1 + 1}
#{

}
#{
1 + 1;
}
#{
// hello
}
#{
1 + 1;
1 + 1;
// comment again
}

#{
    let hello = "Hello, world!";
    // hello my name is charlie
    let world = "Hello, world!"
}

#{
    [hello

    this is text

    and this works
    ]
}

#[
    #{
        1
        2;
        3
    }
]

#{

} hello

--------------------------------------------------------------------------------

 (source_file
  (code_block)
  (code_block)
  (code_block
    (binary_operator
      (int_literal)
      (int_literal)))
  (code_block)
  (code_block
    (binary_operator
      (int_literal)
      (int_literal)))
  (code_block
    (line_comment))
  (code_block
    (binary_operator
      (int_literal)
      (int_literal))
    (binary_operator
      (int_literal)
      (int_literal))
    (line_comment))
  (paragraph_break)
  (code_block
    (let_declaration
      (identifier)
      (string_literal))
    (line_comment)
    (let_declaration
      (identifier)
      (string_literal)))
  (paragraph_break)
  (code_block
    (content_block))
  (paragraph_break)
  (content_block
    (code_block
      (int_literal)
      (int_literal)
      (int_literal)))
  (paragraph_break)
  (code_block))

================================================================================
Content Block
================================================================================

[Hello]

[
    Hello
    ]

#if 1 < 2 {
    [hello]
}

#if 1 < 2 [
    hello
]

#[hello] what


#if 1 < 2 [
    hello
] hello

--------------------------------------------------------------------------------

(source_file
 (paragraph_break)
 (paragraph_break)
 (if_expression
  (comparison_expression
   (int_literal)
   (int_literal))
  (code_block
   (content_block)))
 (paragraph_break)
 (if_expression
  (comparison_expression
   (int_literal)
   (int_literal))
  (content_block))
 (paragraph_break)
 (content_block)
 (paragraph_break)
 (if_expression
  (comparison_expression
   (int_literal)
   (int_literal))
  (content_block)))

================================================================================
Text
================================================================================

#let hello = "Hello, world!"
[ hello ]

--------------------------------------------------------------------------------

(source_file
 (let_declaration
  (identifier)
  (string_literal)))

================================================================================
Function call in text
================================================================================

hello this #is(1, 2). "hello"

--------------------------------------------------------------------------------

(source_file
 (function_call
  (identifier)
  (arguments
   (argument
    (int_literal))
   (argument
    (int_literal))))
 (quote))

================================================================================
Weird Function Calls
================================================================================

#list([A], [B])
#enum(start: 2)[A][B]
#list[A][B]

--------------------------------------------------------------------------------

(source_file
 (function_call
  (identifier)
  (arguments
   (argument
    (content_block))
   (argument
    (content_block))))
 (function_call
  (identifier)
  (arguments
   (asssigned_argument
    (identifier)
    (int_literal))
   (content_block)
   (content_block)))
 (function_call
  (identifier)
  (arguments
   (content_block)
   (content_block))))

================================================================================
Real World Example
================================================================================

#let alert(body, fill: red) = {
  rect(
    // fill: fill,
    // inset: 8pt,
    // radius: 4pt,
    // [Warning:\ #body],
  )
}

#let alert(body, fill: red) = {
  rect(
    fill: fill,
    inset: 8pt,
    radius: 4pt,
    [Warning:\ #body],
  )
}

#alert[Danger is imminent!]

#alert(fill: blue)[
  KEEP OFF TRACKS
]

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (parameters
      (identifier)
      (default_parameter
        (identifier)
        (identifier)))
    (code_block
      (function_call
        (identifier)
        (arguments
          (line_comment)
          (line_comment)
          (line_comment)
          (line_comment)))))
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier)
      (default_parameter
        (identifier)
        (identifier)))
    (code_block
      (function_call
        (identifier)
        (arguments
          (asssigned_argument
            (identifier)
            (identifier))
          (asssigned_argument
            (identifier)
            (numeric
              (int_literal)
              (unit)))
          (asssigned_argument
            (identifier)
            (numeric
              (int_literal)
              (unit)))
          (argument
            (content_block
              (line_break)
              (identifier)))))))
  (paragraph_break)
  (function_call
    (identifier)
    (arguments
      (content_block)))
  (paragraph_break)
  (function_call
    (identifier)
    (arguments
      (asssigned_argument
        (identifier)
        (identifier))
      (content_block))))

================================================================================
If expression
================================================================================

#if 1 < 2 {
  a
} else if 1 == 2 [
   they are equal
]else if "echecking for space" {

} else [
   This is not.
]

--------------------------------------------------------------------------------

(source_file
  (if_expression
    (comparison_expression
      (int_literal)
      (int_literal))
    (code_block
      (identifier))
    (else_clause
      (if_expression
        (comparison_expression
          (int_literal)
          (int_literal))
        (content_block)
        (else_clause
          (if_expression
            (string_literal)
            (code_block)
            (else_clause
              (content_block))))))))

================================================================================
logical operators
================================================================================

#if 1 < 2 and not false [
  This is shown
] else if 1 > 2 or true [
  This is not shown
] else if letter != " " [
  This is shown
] else if letter not in "hello" [
  This is shown
] else if letter in "hello" [
  This is not shown
] else if letter <= what [
  This is not shown
] else if letter >= what [
  This is shown
] else if letter < what [
  This is shown
] else if letter > what [
  This is not shown
] else if letter == what [
  This is not shown
] else if not word [
  This is shown
] else [
    done
]

--------------------------------------------------------------------------------

(source_file
 (if_expression
  (boolean_expression
   (comparison_expression
    (int_literal)
    (int_literal))
   (not_operator
    (boolean_literal)))
  (content_block)
  (else_clause
   (if_expression
    (boolean_expression
     (comparison_expression
      (int_literal)
      (int_literal))
     (boolean_literal))
    (content_block)
    (else_clause
     (if_expression
      (comparison_expression
       (identifier)
       (string_literal))
      (content_block)
      (else_clause
       (if_expression
        (collection_expression
         (identifier)
         (string_literal))
        (content_block)
        (else_clause
         (if_expression
          (collection_expression
           (identifier)
           (string_literal))
          (content_block)
          (else_clause
           (if_expression
            (comparison_expression
             (identifier)
             (identifier))
            (content_block)
            (else_clause
             (if_expression
              (comparison_expression
               (identifier)
               (identifier))
              (content_block)
              (else_clause
               (if_expression
                (comparison_expression
                 (identifier)
                 (identifier))
                (content_block)
                (else_clause
                 (if_expression
                  (comparison_expression
                   (identifier)
                   (identifier))
                  (content_block)
                  (else_clause
                   (if_expression
                    (comparison_expression
                     (identifier)
                     (identifier))
                    (content_block)
                    (else_clause
                     (if_expression
                      (not_operator
                       (identifier))
                      (content_block)
                      (else_clause
                       (content_block))))))))))))))))))))))))


================================================================================
For loop
================================================================================

#for letter in "abc nope" {
  if letter in "hello" {
    break
  }

  letter
}

#for hello, world, now in dict {
  if letter == " " {
    continue
  }

  if letter {
    return
  }

  letter
}

#{
    for letter in what {
      if letter == " " {
        continue
      }
    }
}

--------------------------------------------------------------------------------

(source_file
(for_expression
(pattern
  (identifier))
(string_literal)
(code_block
  (if_expression
    (collection_expression
      (identifier)
      (string_literal))
    (code_block
      (break_statement)))
  (identifier)))
(paragraph_break)
(for_expression
(pattern
  (identifier)
  (identifier)
  (identifier))
(identifier)
(code_block
  (if_expression
    (comparison_expression
      (identifier)
      (string_literal))
    (code_block
      (continue_statement)))
  (if_expression
    (identifier)
    (code_block
      (return_expression)))
  (identifier)))
(paragraph_break)
(code_block
(for_expression
  (pattern
    (identifier))
  (identifier)
  (code_block
    (if_expression
      (comparison_expression
        (identifier)
        (string_literal))
      (code_block
        (continue_statement)))))))

================================================================================
Function creation
================================================================================

#let hello() = {
    "hello"
}

#{
    let hello() = {
        "hello"
    }
}

#let hello(a, b) = {
    a + b
}

#{
    let hello(a, b) = {
        a + b
    }
}

#let hello(a, b, c: 1) = {
    a + b + c
}

#{
    let hello(a: (d + 3), b, c: 1) = {
        a + b + c
    }
}

#let another(a, ..b) = {
    a + b
}

#let one(x) =  x * 2

#let one(x) =  x * 2 random text // this should be an error in the compiler
#let one(x) =  x * 2; random text // this should not be an error

#{
    let one(x) =  x * 2
} random text

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (parameters)
    (code_block
      (string_literal)))
  (paragraph_break)
  (code_block
    (let_declaration
      (identifier)
      (parameters)
      (code_block
        (string_literal))))
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier)
      (identifier))
    (code_block
      (binary_operator
        (identifier)
        (identifier))))
  (paragraph_break)
  (code_block
    (let_declaration
      (identifier)
      (parameters
        (identifier)
        (identifier))
      (code_block
        (binary_operator
          (identifier)
          (identifier)))))
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier)
      (identifier)
      (default_parameter
        (identifier)
        (int_literal)))
    (code_block
      (binary_operator
        (binary_operator
          (identifier)
          (identifier))
        (identifier))))
  (paragraph_break)
  (code_block
    (let_declaration
      (identifier)
      (parameters
        (default_parameter
          (identifier)
          (parenthesized_expression
            (binary_operator
              (identifier)
              (int_literal))))
        (identifier)
        (default_parameter
          (identifier)
          (int_literal)))
      (code_block
        (binary_operator
          (binary_operator
            (identifier)
            (identifier))
          (identifier)))))
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier)
      (identifier))
    (code_block
      (binary_operator
        (identifier)
        (identifier))))
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier))
    (binary_operator
      (identifier)
      (int_literal)))
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier))
    (binary_operator
      (identifier)
      (int_literal)))
  (line_comment)
  (let_declaration
    (identifier)
    (parameters
      (identifier))
    (binary_operator
      (identifier)
      (int_literal)))
  (line_comment)
  (code_block
    (let_declaration
      (identifier)
      (parameters
        (identifier))
      (binary_operator
        (identifier)
        (int_literal)))))

================================================================================
Method / fields
================================================================================

#emph[Hello] \
#emoji.face \
#"hello".len()

Hello, #hello.name()
Hello #hello()[1,2]
Hello #hello(1, 2)[1]
Hello #hello(1, 2).name
Hello #hello(1, 2).name()
Hello #hello(1, 2).name().result
Hello #hello(1, 2)
Hello #hello[1]
hello #hello[]

hello #hello hello
hello #hello() hello
hello #hello(1, 2).name hello
hello #hello(1, 2).name() hello
hello #hello. hello

--------------------------------------------------------------------------------

(source_file
  (function_call
    (identifier)
    (arguments
      (content_block)))
  (line_break)
  (field_access
    (identifier)
    (identifier))
  (line_break)
  (method_call
    (string_literal)
    (identifier)
    (arguments))
  (paragraph_break)
  (method_call
    (identifier)
    (identifier)
    (arguments))
  (function_call
    (identifier)
    (arguments
      (content_block)))
  (function_call
    (identifier)
    (arguments
      (argument
        (int_literal))
      (argument
        (int_literal))
      (content_block)))
  (field_access
    (function_call
      (identifier)
      (arguments
        (argument
          (int_literal))
        (argument
          (int_literal))))
    (identifier))
  (method_call
    (function_call
      (identifier)
      (arguments
        (argument
          (int_literal))
        (argument
          (int_literal))))
    (identifier)
    (arguments))
  (field_access
    (method_call
      (function_call
        (identifier)
        (arguments
          (argument
            (int_literal))
          (argument
            (int_literal))))
      (identifier)
      (arguments))
    (identifier))
  (function_call
    (identifier)
    (arguments
      (argument
        (int_literal))
      (argument
        (int_literal))))
  (function_call
    (identifier)
    (arguments
      (content_block)))
  (function_call
    (identifier)
    (arguments
      (content_block)))
  (paragraph_break)
  (identifier)
  (function_call
    (identifier)
    (arguments))
  (field_access
    (function_call
      (identifier)
      (arguments
        (argument
          (int_literal))
        (argument
          (int_literal))))
    (identifier))
  (method_call
    (function_call
      (identifier)
      (arguments
        (argument
          (int_literal))
        (argument
          (int_literal))))
    (identifier)
    (arguments))
  (identifier))

================================================================================
Complex example
================================================================================

#let name = "Typst"
This is #name's documentation.
It explains #name.

#let add(x, y) = x + y
Sum is #add(2, 3).


#for c in "ABC" [
  #c is a letter.
]

#while true [
    // comments work here
]

#let n = 2

#while n < 1000 {
    1 + 1;
    random = 1 + 1;
    n = (n * 2) - 1;
    // true
    // line comments work here
    /* block comments work here */
}

#{
    let x = 1; x + 2
}

#let n = 1
#while n < 10 {
     n = (n * 2) - 1;
     (n,)
}

#let arr = (1, 2)

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (string_literal))
  (identifier)
  (identifier)
  (paragraph_break)
  (let_declaration
    (identifier)
    (parameters
      (identifier)
      (identifier))
    (binary_operator
      (identifier)
      (identifier)))
  (function_call
    (identifier)
    (arguments
      (argument
        (int_literal))
      (argument
        (int_literal))))
  (paragraph_break)
  (for_expression
    (pattern
      (identifier))
    (string_literal)
    (content_block
      (identifier)))
  (paragraph_break)
  (while_expression
    (boolean_literal)
    (content_block
      (line_comment)))
  (paragraph_break)
  (let_declaration
    (identifier)
    (int_literal))
  (paragraph_break)
  (while_expression
    (comparison_expression
      (identifier)
      (int_literal))
    (code_block
      (binary_operator
        (int_literal)
        (int_literal))
      (assignment_expression
        (identifier)
        (binary_operator
          (int_literal)
          (int_literal)))
      (assignment_expression
        (identifier)
        (binary_operator
          (parenthesized_expression
            (binary_operator
              (identifier)
              (int_literal)))
          (int_literal)))
      (line_comment)
      (line_comment)
      (block_comment)))
  (paragraph_break)
  (code_block
    (let_declaration
      (identifier)
      (int_literal))
    (binary_operator
      (identifier)
      (int_literal)))
  (paragraph_break)
  (let_declaration
    (identifier)
    (int_literal))
  (while_expression
    (comparison_expression
      (identifier)
      (int_literal))
    (code_block
      (assignment_expression
        (identifier)
        (binary_operator
          (parenthesized_expression
            (binary_operator
              (identifier)
              (int_literal)))
          (int_literal)))
      (array
        (identifier))))
  (paragraph_break)
  (let_declaration
    (identifier)
    (array
      (int_literal)
      (int_literal))))

================================================================================
arrays vs parentheses
================================================================================

#()
#let value = (1 + 3)
#let int = ((1) + (2 + 3))

#(a,b,c)
#(n,)
#(1, 2, 3)
#(1,)
#let arr = (a, b, c)

--------------------------------------------------------------------------------

(source_file
  (array)
  (let_declaration
    (identifier)
    (parenthesized_expression
      (binary_operator
        (int_literal)
        (int_literal))))
  (let_declaration
    (identifier)
    (parenthesized_expression
      (binary_operator
        (parenthesized_expression
          (int_literal))
        (parenthesized_expression
          (binary_operator
            (int_literal)
            (int_literal))))))
  (paragraph_break)
  (array
    (identifier)
    (identifier)
    (identifier))
  (array
    (identifier))
  (array
    (int_literal)
    (int_literal)
    (int_literal))
  (array
    (int_literal))
  (let_declaration
    (identifier)
    (array
      (identifier)
      (identifier)
      (identifier))))

================================================================================
Unnamed functions
================================================================================

#it => [#it #it]
#(x) => 1
#(x,     ) => x + 1
#(      x,) => x + 1
#(x, y) => x + y
#(x:1,) => x + 1

#(x) => 1 "this is a quote"

#let x = 1 this should be an error
#{
    (x, y) => not (-10 + x)
    z => z + 1
    let x = (x) => 1

    type(x)
    (c, d) => c + d
}

--------------------------------------------------------------------------------

(source_file
  (function_expression
    (identifier)
    (content_block
      (identifier)
      (identifier)))
  (function_expression
    (parameters
      (identifier))
    (int_literal))
  (function_expression
    (parameters
      (identifier))
    (binary_operator
      (identifier)
      (int_literal)))
  (function_expression
    (parameters
      (identifier))
    (binary_operator
      (identifier)
      (int_literal)))
  (function_expression
    (parameters
      (identifier)
      (identifier))
    (binary_operator
      (identifier)
      (identifier)))
  (function_expression
    (parameters
      (default_parameter
        (identifier)
        (int_literal)))
    (binary_operator
      (identifier)
      (int_literal)))
  (paragraph_break)
  (function_expression
    (parameters
      (identifier))
    (int_literal))
  (quote)
  (let_declaration
    (identifier)
    (int_literal))
  (code_block
    (function_expression
      (parameters
        (identifier)
        (identifier))
      (not_operator
        (parenthesized_expression
          (binary_operator
            (negation
              (int_literal))
            (identifier)))))
    (function_expression
      (identifier)
      (binary_operator
        (identifier)
        (int_literal)))
    (let_declaration
      (identifier)
      (function_expression
        (parameters
          (identifier))
        (int_literal)))
    (function_call
      (identifier)
      (arguments
        (argument
          (identifier))))
    (function_expression
      (parameters
        (identifier)
        (identifier))
      (binary_operator
        (identifier)
        (identifier)))))

================================================================================
Set expression
================================================================================

#set text(red) if 1 == "hello"
#set text(8pt)
#{
  set text(red) if 1 == "hello"
  set text(8pt)
  set text(red) if 1 == "hello"
}

#set text(red) if 1 + 2 + 3 < 6
#set list(marker: n => if n == 1 [--] else [hello]) // content blocks support utf-8
#set table(fill: (x, y) => if calc.even(x + y) { rgb("aaa") })
#set page(height: 50pt, margin: (bottom: 20pt, rest: 10pt))
#set list(marker: [--])

--------------------------------------------------------------------------------

(source_file
  (set_expression
    (function_call
      (identifier)
      (arguments
        (argument
          (identifier))))
    (if_cause
      (comparison_expression
        (int_literal)
        (string_literal))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (argument
          (numeric
            (int_literal)
            (unit))))))
  (code_block
    (set_expression
      (function_call
        (identifier)
        (arguments
          (argument
            (identifier))))
      (if_cause
        (comparison_expression
          (int_literal)
          (string_literal))))
    (set_expression
      (function_call
        (identifier)
        (arguments
          (argument
            (numeric
              (int_literal)
              (unit))))))
    (set_expression
      (function_call
        (identifier)
        (arguments
          (argument
            (identifier))))
      (if_cause
        (comparison_expression
          (int_literal)
          (string_literal)))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (argument
          (identifier))))
    (if_cause
      (comparison_expression
        (binary_operator
          (binary_operator
            (int_literal)
            (int_literal))
          (int_literal))
        (int_literal))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (function_expression
            (identifier)
            (if_expression
              (comparison_expression
                (identifier)
                (int_literal))
              (content_block)
              (else_clause
                (content_block))))))))
  (line_comment)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (function_expression
            (parameters
              (identifier)
              (identifier))
            (if_expression
              (method_call
                (identifier)
                (identifier)
                (arguments
                  (argument
                    (binary_operator
                      (identifier)
                      (identifier)))))
              (code_block
                (function_call
                  (identifier)
                  (arguments
                    (argument
                      (string_literal)))))))))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (numeric
            (int_literal)
            (unit)))
        (asssigned_argument
          (identifier)
          (dictionary
            (pair
              (identifier)
              (numeric
                (int_literal)
                (unit)))
            (pair
              (identifier)
              (numeric
                (int_literal)
                (unit))))))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (content_block))))))

================================================================================
Show expression
================================================================================

#show "Project": smallcaps
#show "badly": "great"
#show: "badly"
#show par: set block()

#show link: it => underline(text(fill: rgb("283663"), it))
#show heading.where(level: 2): set text(10pt)
#show: rect.with(width: 100pt, height: 50pt, inset: 0pt, fill: rgb("aaa"))

#set heading(numbering: "(I)")
#show heading: it => block[]
#show heading: it => block[
  #set align(center)
  #set text(font: "Inria Serif")
  \~ #emph(it.body)
     #counter(heading).display() \~
]

--------------------------------------------------------------------------------

(source_file
  (show_expression
    (string_literal)
    (identifier))
  (show_expression
    (string_literal)
    (string_literal))
  (show_expression
    (string_literal))
  (show_expression
    (identifier)
    (set_expression
      (function_call
        (identifier)
        (arguments))))
  (paragraph_break)
  (show_expression
    (identifier)
    (function_expression
      (identifier)
      (function_call
        (identifier)
        (arguments
          (argument
            (function_call
              (identifier)
              (arguments
                (asssigned_argument
                  (identifier)
                  (function_call
                    (identifier)
                    (arguments
                      (argument
                        (string_literal)))))
                (argument
                  (identifier)))))))))
  (show_expression
    (method_call
      (identifier)
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (int_literal))))
    (set_expression
      (function_call
        (identifier)
        (arguments
          (argument
            (numeric
              (int_literal)
              (unit)))))))
  (show_expression
    (method_call
      (identifier)
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (numeric
            (int_literal)
            (unit)))
        (asssigned_argument
          (identifier)
          (numeric
            (int_literal)
            (unit)))
        (asssigned_argument
          (identifier)
          (numeric
            (int_literal)
            (unit)))
        (asssigned_argument
          (identifier)
          (function_call
            (identifier)
            (arguments
              (argument
                (string_literal))))))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (string_literal)))))
  (show_expression
    (identifier)
    (function_expression
      (identifier)
      (function_call
        (identifier)
        (arguments
          (content_block)))))
  (show_expression
    (identifier)
    (function_expression
      (identifier)
      (function_call
        (identifier)
        (arguments
          (content_block
            (set_expression
              (function_call
                (identifier)
                (arguments
                  (argument
                    (identifier)))))
            (set_expression
              (function_call
                (identifier)
                (arguments
                  (asssigned_argument
                    (identifier)
                    (string_literal)))))
            (escape_sequence)
            (function_call
              (identifier)
              (arguments
                (argument
                  (field_access
                    (identifier)
                    (identifier)))))
            (method_call
              (function_call
                (identifier)
                (arguments
                  (argument
                    (identifier))))
              (identifier)
              (arguments))
            (escape_sequence)))))))

================================================================================
While loop
================================================================================

#let i = 0
#while i < 10 {
    i = i + 1
}

#while true {
    break
}

#while some_val {
    continue
}

#while 1 and 2 {
    return
}

#{
    while 1 {
        i /= 1
    }
}

--------------------------------------------------------------------------------

(source_file
  (let_declaration
    (identifier)
    (int_literal))
  (while_expression
    (comparison_expression
      (identifier)
      (int_literal))
    (code_block
      (assignment_expression
        (identifier)
        (binary_operator
          (identifier)
          (int_literal)))))
  (paragraph_break)
  (while_expression
    (boolean_literal)
    (code_block
      (break_statement)))
  (paragraph_break)
  (while_expression
    (identifier)
    (code_block
      (continue_statement)))
  (paragraph_break)
  (while_expression
    (boolean_expression
      (int_literal)
      (int_literal))
    (code_block
      (return_expression)))
  (paragraph_break)
  (code_block
    (while_expression
      (int_literal)
      (code_block
        (assignment_operators
          (identifier)
          (int_literal))))))

================================================================================
Errors I havent' handled yet
================================================================================

// works
#{
    let i = 1
    let j = 2
}
// works
#{
  let a = [from]
  let b = [world]
  [what]
  a + [ the ] + b
}
// haven't handled this yet
#{
    for i in dict {
        i
        let j = i
        j += 1
    }
}

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (code_block
    (let_declaration
      (identifier)
      (int_literal))
    (let_declaration
      (identifier)
      (int_literal)))
  (line_comment)
  (code_block
    (let_declaration
      (identifier)
      (content_block))
    (let_declaration
      (identifier)
      (content_block))
    (content_block)
    (binary_operator
      (binary_operator
        (identifier)
        (content_block))
      (identifier)))
  (line_comment)
  (code_block
    (for_expression
      (pattern
        (identifier))
      (identifier)
      (code_block
        (identifier)
        (let_declaration
          (identifier)
          (identifier))
        (assignment_operators
          (identifier)
          (int_literal))))))

================================================================================
include and import
================================================================================

#include "bar.typ"
#import "bar.typ"
#import "bar.typ": *
#import "bar.typ": a, b, c

--------------------------------------------------------------------------------

(source_file
  (include_expression
    (string_literal))
  (import_expression
    (string_literal))
  (import_expression
    (string_literal)
    (import_items))
  (import_expression
    (string_literal)
    (import_items
      (identifier)
      (identifier)
      (identifier))))

================================================================================
dictionary
================================================================================

// Empty
#(:)

// One pair
#(a: 1)

// Two pairs and string key.
#let dict = (normal: 1, "spacy key": 2)
#dict

#let dict = (a: 3, c: 2, b: 1)
#let dict = (a: z, b: y, c: x)
#test("c" in dict, true)
#test("d" not in dict, true)
#test(dict.len(), 3)
#test(dict.values(), (3, 1, 2))
#test(dict.pairs().map(p => p.first() + str(p.last())).join(), "a3b1c2")
unnamed function
#(x:1,) => x + 1
#test(dict.normal, 1)
#test(dict.at("spacy key"), 2)

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (dictionary)
  (paragraph_break)
  (line_comment)
  (dictionary
    (pair
      (identifier)
      (int_literal)))
  (paragraph_break)
  (line_comment)
  (let_declaration
    (identifier)
    (dictionary
      (pair
        (identifier)
        (int_literal))
      (pair
        (string_literal)
        (int_literal))))
  (identifier)
  (paragraph_break)
  (let_declaration
    (identifier)
    (dictionary
      (pair
        (identifier)
        (int_literal))
      (pair
        (identifier)
        (int_literal))
      (pair
        (identifier)
        (int_literal))))
  (let_declaration
    (identifier)
    (dictionary
      (pair
        (identifier)
        (identifier))
      (pair
        (identifier)
        (identifier))
      (pair
        (identifier)
        (identifier))))
  (function_call
    (identifier)
    (arguments
      (argument
        (collection_expression
          (string_literal)
          (identifier)))
      (argument
        (boolean_literal))))
  (function_call
    (identifier)
    (arguments
      (argument
        (collection_expression
          (string_literal)
          (identifier)))
      (argument
        (boolean_literal))))
  (function_call
    (identifier)
    (arguments
      (argument
        (method_call
          (identifier)
          (identifier)
          (arguments)))
      (argument
        (int_literal))))
  (function_call
    (identifier)
    (arguments
      (argument
        (method_call
          (identifier)
          (identifier)
          (arguments)))
      (argument
        (array
          (int_literal)
          (int_literal)
          (int_literal)))))
  (function_call
    (identifier)
    (arguments
      (argument
        (method_call
          (method_call
            (method_call
              (identifier)
              (identifier)
              (arguments))
            (identifier)
            (arguments
              (argument
                (binary_operator
                  (function_expression
                    (identifier)
                    (method_call
                      (identifier)
                      (identifier)
                      (arguments)))
                  (function_call
                    (identifier)
                    (arguments
                      (argument
                        (method_call
                          (identifier)
                          (identifier)
                          (arguments)))))))))
          (identifier)
          (arguments)))
      (argument
        (string_literal))))
  (function_expression
    (parameters
      (default_parameter
        (identifier)
        (int_literal)))
    (binary_operator
      (identifier)
      (int_literal)))
  (function_call
    (identifier)
    (arguments
      (argument
        (field_access
          (identifier)
          (identifier)))
      (argument
        (int_literal))))
  (function_call
    (identifier)
    (arguments
      (argument
        (method_call
          (identifier)
          (identifier)
          (arguments
            (argument
              (string_literal)))))
      (argument
        (int_literal)))))

================================================================================
Expressions which may not parse correctly
================================================================================

#set text(blue) if it.has("label") and it.label == "hello"
#set text(blue) if it.has("label") and (it.label == "hello")
// #show <red>: set text(red)

--------------------------------------------------------------------------------

(source_file
  (set_expression
    (function_call
      (identifier)
      (arguments
        (argument
          (identifier))))
    (if_cause
      (comparison_expression
        (field_access
          (boolean_expression
            (method_call
              (identifier)
              (identifier)
              (arguments
                (argument
                  (string_literal))))
            (identifier))
          (identifier))
        (string_literal))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (argument
          (identifier))))
    (if_cause
      (boolean_expression
        (method_call
          (identifier)
          (identifier)
          (arguments
            (argument
              (string_literal))))
        (parenthesized_expression
          (comparison_expression
            (field_access
              (identifier)
              (identifier))
            (string_literal)))))))
